%step1: Choose N trials for training, after this step, we can obtain N trained models
%step2: Choose 1 testing trial w.r.t N-1 trained model(except 1 testing trial).  
        %After this step, we can get (N - 1) log_likelihood vectors for each trained model
%step3: Calculate the mean vector and variance vector of log_likelihood for each trained model. 
        %After this step, we can get the 1 mean vector and 1 variance vector for each trained model
%step4: Choose the trained model by compare the mean value of ending point of each mean vector: max(meanVector(end))
%step5: the expected log_likelihood is generated by trained model that has the maximum mean value of the ending point through the same file_id trial
        %as the testing trial
%step6: threshold = mean - c*standard variation
function calculate_state_threshold(varargin) %varargin: for loading given trained model
clc;
close all;
global_variables;
global modelPath STATE TRAINING_DATASET_PATH THRESHOLD_PATH PLOT_SAVE
[APPROACH, ROTATION, INSERTION, MATING] = deal(1,2,3,4);
c       = 2.0; %for calculating the threshood
for nState = APPROACH : MATING
    data_struct = struct;
    % Load Model for selected state.
    learnedModel = {};
    FILE_ID      = {};
    file            = dir([strcat(modelPath,char(STATE(nState)),'/') '*.mat']);
    if ~isempty(varargin)      % for loading given trained model
        file    = [];
        for n = 1:length(varargin{1})
            tempfile            = dir([strcat(modelPath,char(STATE(nState)),'/') strcat('*',char(varargin{1}(n)),'.mat')]);
            file = [file, tempfile];
        end
    end
    
    %load all the trained models and find the trial from the learned model
    for nlearnedModel = 1 : length(file)
        fileID       = file(nlearnedModel).name((length(file(nlearnedModel).name)-5):(length(file(nlearnedModel).name)-4)); %find the file id
        FILE_ID      = [FILE_ID, {fileID}];
        model    = load(file(nlearnedModel).name); 
        learnedModel = [learnedModel, {model}];
    end
    
    %cd saving path
    thresholdPath  = strcat(THRESHOLD_PATH, char(STATE(nState)));
    if (exist(thresholdPath,'dir') == 0)
        mkdir(thresholdPath);
    end
    cd(thresholdPath);
    delete *;
    
    %left one cross validataion
    MODEL_SELECTION_METHOD = [];
    LIKELIHOOD     = {};
    for n = 1:length(FILE_ID) % for each testing file 
        disp(strcat(char(STATE(nState)),': ',num2str(n),'/',num2str(length(FILE_ID)),'-Calculating the threshold'));
        modelIdx = 1:length(learnedModel);
        modelIdx(n) = [];
        
        %step2-1: load 1 testing trail
        [sensor, R_State, foldname] = load_one_trial(FILE_ID{n},TRAINING_DATASET_PATH);
        [data, meanSigma] = data_preprocessing(sensor);
        data = data(:,R_State(nState):R_State(nState + 1));
        
        %step2-2: load N-1 learned models
        obsModel            = learnedModel{1}.obsModel;
        obsModelType        = learnedModel{1}.obsModel.type;
        log_likelihood = zeros(length(modelIdx),length(data) - obsModel.r);
        for m = 1:length(modelIdx) % for each trained model
           % calculate the likelihoood
            sensor = [];
            sensor                  = data;
            data_struct.obs         = sensor;
            data_struct.true_labels = ones(1,size(sensor,2));
            data_struct.test_cases  = 1;
            data_struct.blockSize   = ones(1,size(sensor,2));
            data_struct.blockEnd    = 1:size(sensor,2);
            if strcmp(obsModelType,'AR')
                [X,valid]               = makeDesignMatrix(data_struct.obs,obsModel.r);
                data_struct.obs         = data_struct.obs(:,find(valid));
                data_struct.X           = X(:,find(valid));
                data_struct.blockSize   = ones(1,size(data_struct.obs,2));
                data_struct.blockEnd    = cumsum(data_struct.blockSize);
                data_struct.true_labels = data_struct.true_labels(find(valid));
            end
            %testing the observed data for each learned model
            dist_struct         = learnedModel{modelIdx(m)}.dist_struct; 
            theta               = learnedModel{modelIdx(m)}.theta;
            obsModel            = learnedModel{modelIdx(m)}.obsModel;
            obsModelType        = learnedModel{modelIdx(m)}.obsModel.type;
            [testing_total_log_likelihood, testing_neglog_c] = observation_likelihood(data_struct,obsModelType,dist_struct,theta);
            testing_neglog_c = cumsum(testing_neglog_c);
            log_likelihood(m,:) = testing_neglog_c; %
        end   %.w.r.t N-1 models  
        LIKELIHOOD = [LIKELIHOOD, {log_likelihood}];
        
        %calculate the mean likelihood
       %#-1
       mean_likelihood        = mean(log_likelihood);
       MODEL_SELECTION_METHOD = [MODEL_SELECTION_METHOD, mean_likelihood(end)];
       %#-2
%         MODEL_SELECTION_METHOD = [MODEL_SELECTION_METHOD, max(log_likelihood(:,end))];
    end  % end for one state 
       
    [~,optimalIndex] = max(MODEL_SELECTION_METHOD);  %%%%%%%find the optimal model
    OPTIMAL_MODEL = FILE_ID{optimalIndex};
    
    %calculate the the threshold
    OPTIMAL_LIKELIHOOD = LIKELIHOOD{optimalIndex};
    mu             = mean(OPTIMAL_LIKELIHOOD);     
    sigma          = sqrt(var(OPTIMAL_LIKELIHOOD));
    threshold      = mu - c * sigma; 
    expected_likelihood = mu; %Expectation Maximization
    
    cd(thresholdPath);
    %save all the likelihood for each trained model
    fileName = strcat('OPTIMAL_LIKELIHOOD_',char(STATE(nState)));
    save(fileName,'OPTIMAL_LIKELIHOOD');
    
    fileName = strcat('OPTIMAL_MODEL_',char(STATE(nState)));
    save(fileName,'OPTIMAL_MODEL');
    
    if PLOT_SAVE
        gh = figure;
        plot(threshold','r--');
        hold on;
        plot(expected_likelihood','b','LineWidth',2);
        title(char(STATE(nState)));
        legend('Threshold','Expected log-likelihood','Location','NorthWest')
        saveas(gh, char(STATE(nState)),'jpg');
    end
end
end